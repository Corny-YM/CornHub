// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String?
  first_name   String?
  last_name    String?
  full_name    String?
  avatar       String?
  cover        String?
  birth_year   Int?
  birth_month  Int?
  birth_day    Int?
  verified     Boolean   @default(false)
  last_sign_in DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // 
  // groups Group[] @relation("UserToGroup")
  groups                Group[]         @relation("UserToGroup")
  posts                 Post[]          @relation("UserToPost")
  comments              Comment[]       @relation("UserToComment")
  reacts                Reaction[]      @relation("UserToReaction")
  senderNotifications   Notification[]  @relation("SenderToNotification")
  receiverNotifications Notification[]  @relation("ReceiverToNotification")
  senderReports         Report[]        @relation("SenderToReport")
  userReports           Report[]        @relation("UserToReport")
  friends               Friend[]        @relation("UserToFriend")
  friendUserInfo        Friend[]
  senderFriendRequest   FriendRequest[] @relation("SenderToFriendRequest")
  receiverFriendRequest FriendRequest[] @relation("ReceiverToFriendRequest")
  followerUserInfo      Follower[]
  followers             Follower[]      @relation("UserToFollower")
  groupMembers          GroupMember[]   @relation("MemberToGroupMember")
  groupFollowers        GroupFollower[]
  senderGroupRequest    GroupRequest[]  @relation("SenderToGroupRequest")
  receiverGroupRequest  GroupRequest[]  @relation("ReceiverToGroupRequest")
  files                 File[]          @relation("UserToFile")

  @@map("users")
}

model Group {
  id              Int      @id @default(autoincrement())
  group_name      String
  cover           String?
  status          Boolean  @default(true) // public or private
  quantity        Int      @default(0)
  approve_members Boolean  @default(false) // active feat confirm members
  approve_posts   Boolean  @default(false) // active feat confirm posts
  description     String?  @db.Text
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // relation
  owner_id String // created user
  owner    User   @relation("UserToGroup", fields: [owner_id], references: [id])

  posts         Post[]          @relation("GroupToPost")
  notifications Notification[]  @relation("GroupToNotification")
  reports       Report[]        @relation("GroupToReport")
  groupMembers  GroupMember[]   @relation("GroupToGroupMember")
  groupFollower GroupFollower[]
  groupRequests GroupRequest[]  @relation("GroupToGroupRequest")

  @@index([owner_id])
  @@map("groups")
}

model Post {
  id         Int      @id @default(autoincrement())
  type       Int      @default(0) @db.TinyInt // 0: personal - 1: group
  content    String?  @db.Text
  background String?
  status     String   @default("friends") @db.VarChar(10) // friends, public, hide
  approve    Boolean?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  user_id  String
  user     User   @relation("UserToPost", fields: [user_id], references: [id])
  group_id Int?
  group    Group? @relation("GroupToPost", fields: [group_id], references: [id])
  file_id  Int?
  file     File?  @relation("FileToPost", fields: [file_id], references: [id])

  reports       Report[]       @relation("PostToReport")
  comments      Comment[]      @relation("PostToComment")
  reactions     Reaction[]     @relation("PostToReaction")
  notifications Notification[] @relation("PostToNotification")

  @@index([user_id])
  @@index([file_id])
  @@index([group_id])
  @@map("posts")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  file       String?
  file_type  Int?     @db.TinyInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  comment_id Int?

  post_id Int
  post    Post @relation("PostToComment", fields: [post_id], references: [id])

  user_id String
  user    User   @relation("UserToComment", fields: [user_id], references: [id])

  // 
  reacts        Reaction[]     @relation("CommentToReaction")
  notifications Notification[] @relation("CommentToNotification")
  reports       Report[]       @relation("CommentToReport")

  @@index([post_id])
  @@index([user_id])
  @@index([comment_id])
  @@map("comments")
}

model Reaction {
  id         Int      @id @default(autoincrement())
  type       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  comment_id Int?
  comment    Comment? @relation("CommentToReaction", fields: [comment_id], references: [id])

  post_id Int
  post    Post @relation("PostToReaction", fields: [post_id], references: [id])

  user_id String
  user    User   @relation("UserToReaction", fields: [user_id], references: [id])

  @@unique([user_id, post_id])
  @@unique([user_id, post_id, comment_id])
  @@index([comment_id])
  @@index([post_id])
  @@index([user_id])
  @@map("reactions")
}

model Notification {
  id          Int      @id @default(autoincrement())
  type        String
  url         String
  description String
  read        Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // relation
  sender_id String
  sender    User   @relation("SenderToNotification", fields: [sender_id], references: [id])

  receiver_id String
  receiver    User   @relation("ReceiverToNotification", fields: [receiver_id], references: [id])

  post_id Int?
  post    Post? @relation("PostToNotification", fields: [post_id], references: [id])

  comment_id Int?
  comment    Comment? @relation("CommentToNotification", fields: [comment_id], references: [id])

  group_id Int?
  group    Group? @relation("GroupToNotification", fields: [group_id], references: [id])

  @@index([sender_id])
  @@index([receiver_id])
  @@index([post_id])
  @@index([comment_id])
  @@index([group_id])
  @@map("notifications")
}

model Report {
  id         Int      @id @default(autoincrement())
  status     Int      @default(0) @db.TinyInt
  report_to  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  post_id Int?
  post    Post? @relation("PostToReport", fields: [post_id], references: [id])

  sender_id String
  sender    User   @relation("SenderToReport", fields: [sender_id], references: [id])

  user_id String?
  user    User?   @relation("UserToReport", fields: [user_id], references: [id])

  comment_id Int?
  comment    Comment? @relation("CommentToReport", fields: [comment_id], references: [id])

  group_id Int?
  group    Group? @relation("GroupToReport", fields: [group_id], references: [id])

  @@index([user_id])
  @@index([post_id])
  @@index([sender_id])
  @@index([comment_id])
  @@index([group_id])
  @@map("reports")
}

model Friend {
  id         Int      @id @default(autoincrement())
  status     Int      @default(0) @db.TinyInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  friend_id String
  friend    User   @relation("UserToFriend", fields: [friend_id], references: [id])

  @@unique([user_id, friend_id])
  @@index([user_id])
  @@index([friend_id])
  @@map("friends")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  denied     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  sender_id String
  sender    User   @relation("SenderToFriendRequest", fields: [sender_id], references: [id])

  receiver_id String
  receiver    User   @relation("ReceiverToFriendRequest", fields: [receiver_id], references: [id])

  @@unique([sender_id, receiver_id])
  @@index([sender_id])
  @@index([receiver_id])
  @@map("friend_request")
}

model Follower {
  id         Int      @id @default(autoincrement())
  status     Boolean  @default(true) // true: follow - false: unfollow
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  follower_id String
  follower    User   @relation("UserToFollower", fields: [follower_id], references: [id])

  @@unique([user_id, follower_id])
  @@index([user_id])
  @@index([follower_id])
  @@map("followers")
}

model GroupMember {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  member_id String
  member    User   @relation("MemberToGroupMember", fields: [member_id], references: [id])

  group_id Int
  group    Group @relation("GroupToGroupMember", fields: [group_id], references: [id])

  @@unique([member_id, group_id])
  @@index([member_id])
  @@index([group_id])
  @@map("group_members")
}

model GroupFollower {
  id         Int      @id @default(autoincrement())
  status     Boolean  @default(true) // true: follow - false: unfollow
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  follower_id String
  follower    User   @relation(fields: [follower_id], references: [id])

  group_id Int
  group    Group @relation(fields: [group_id], references: [id])

  @@unique([follower_id, group_id])
  @@index([follower_id])
  @@index([group_id])
  @@map("group_followers")
}

model GroupRequest {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relation
  group_id Int
  group    Group @relation("GroupToGroupRequest", fields: [group_id], references: [id])

  sender_id String
  sender    User   @relation("SenderToGroupRequest", fields: [sender_id], references: [id])

  receiver_id String
  receiver    User   @relation("ReceiverToGroupRequest", fields: [receiver_id], references: [id])

  @@unique([sender_id, receiver_id])
  @@index([sender_id])
  @@index([receiver_id])
  @@index([group_id])
  @@map("group_requests")
}

model File {
  id          Int      @id @default(autoincrement())
  size        Int
  name        String
  actual_name String
  path        String
  ext         String
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relation
  user_id String
  user    User   @relation("UserToFile", fields: [user_id], references: [id])
  post_id Post[] @relation("FileToPost")

  @@index([user_id])
  @@map("files")
}
